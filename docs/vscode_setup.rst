Contributor TextEditor (VSCode)
================================

Getting Intellisense Working
----------------------------

For developers using VSCode as their text editors, the follow configurations has worked well.

Please install the VSCode extensions

* VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools
* VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=twxs.cmake
* VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools
* VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance
* VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=ms-python.python

In ``.vscode/settings.json``, we attach the configurations:

For python configuration, we assume that the user's virtual environment is in `env` dir from the workspace directory.

.. code-block:: json

    {
        "python.defaultInterpreterPath": "env/bin/python",
        "editor.codeActionsOnSave": {
            "source.organizeImports": false,
            "editor.formatOnSave": true,
            "source.fixAll": true,
        },
        "python.languageServer": "Pylance",
        "python.analysis.autoImportCompletions": true,
        "python.analysis.logLevel": "Trace",
        "python.autoComplete.showAdvancedMembers": true,
        "python.autoComplete.addBrackets": true,
        "python.testing.pytestPath": "env/bin/pytest",
        "python.analysis.completeFunctionParens": true,
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.testing.nosetestsEnabled": false,
        "python.formatting.provider": "autopep8",
        "python.testing.pytestArgs": [
            "test"
        ],
        "python.formatting.autopep8Args": [
            "--max-line-length=500",
            "--ignore", "E226,E24,E26,E402",
        ],
        "cmake.cmakePath": "/usr/local/bin/cmake",
        "C_Cpp.intelliSenseEngine": "Default",
        "files.associations": {
            ... // this should be autogenerated
        }
    }

For ``.vscode/c_cpp_properties.json``, we use the configurations below assuming the mpic++ compiler path.
Please update to the one on your desktop.

.. code-block:: json

    {
        "configurations": [
            {
                "name": "Linux",
                "includePath": [
                    "${workspaceFolder}/**"
                ],
                "defines": [],
                "compilerPath": "/usr/lib64/openmpi/bin/mpic++",
                "cStandard": "c11",
                "cppStandard": "c++17",
                "intelliSenseMode": "clang-x64",
                "configurationProvider": "ms-vscode.cmake-tools"
            }
        ],
        "version": 4
    }

Debugging Manually
------------------

This approach is based on the [open-mpi documentation](https://www.open-mpi.org/faq/?category=debugging#serial-debuggers).
1. Apply the diff below. This essentially causes the main loop in the c++ code to hang for each process until
the attached gdb process comes in and sets ``var i`` to a non-zero value.

.. code-block:: txt

    @@ -791,6 +791,15 @@ bool RunLoopOnce(HorovodGlobalState& state) {
    bool InitializeHorovodOnce(
        const std::vector<int>& ranks,
        const std::vector<std::vector<int>>& process_set_ranks) {
    +  // add breakpoint
    +  volatile int i = 0;
    +  char hostname[256];
    +  gethostname(hostname, sizeof(hostname));
    +  printf("PID %d on %s ready for attach\n", getpid(), hostname);
    +  fflush(stdout);
    +  LOG(INFO) << "PID " << getpid() << " on " << hostname << "ready for attach\n";
    +  while (0 == i)
    +    sleep(5);
    // Ensure background thread is only started once.
    if (!horovod_global.initialize_flag.test_and_set()) {
        horovod_global.control_operation = ParseControllerOpsFromEnv();
    diff --git a/test/parallel/test_tensorflow.py b/test/parallel/test_tensorflow.py
    index d24b1a4..de60f45 100644

1. Rebuild

.. code-block:: bash

    $ HOROVOD_DEBUG=1 HOROVOD_WITH_MPI=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_TENSORFLOW=1 pip install -v -e .


2. Run pytest. For this example, we use ``test/parallel/test_tensorflow.py::test_horovod_allgather_error``.

.. code-block:: bash

    $ horovodrun  --verbose -np 2 pytest -v test/parallel/test_tensorflow.py -k "test_horovod_allgather_error"


3. Find the 2 running pytest via ``ps -ef | grep pytest``

4. Invoke gdb for each of the pid and set desired breakpoints.

.. code-block:: txt

    $ gdb
    ...
    (gdb)  break  horovod::tensorflow::HorovodAllgatherOp::ComputeAsync
    Breakpoint 4 at 0x7f53043b464d: horovod::tensorflow::HorovodAllgatherOp::ComputeAsync. (7 locations)
    (gdb) up
    #1  0x00007f53a647b6a4 in sleep () from /lib64/libc.so.6
    (gdb) up
    #2  0x00007f53042bfbe9 in horovod::common::(anonymous namespace)::InitializeHorovodOnce (ranks=std::vector of length 0, capacity 0, process_set_ranks=std::vector of length 0, capacity 0)
        at /home/molee/horovod/horovod/common/operations.cc:802
    802	    sleep(5);
    (gdb) set var i = 9
    (gdb) c
    Continuing.
    [New Thread 0x7f52c9ffb700 (LWP 16116)]
    [New Thread 0x7f52c8de1700 (LWP 16117)]
    [New Thread 0x7f52ad953700 (LWP 16121)]
    [New Thread 0x7f52988a2700 (LWP 16145)]
    [Thread 0x7f52988a2700 (LWP 16145) exited]
    [Switching to Thread 0x7f52ca7fc700 (LWP 13898)]

    Breakpoint 4, horovod::tensorflow::HorovodAllgatherOp::ComputeAsync(tensorflow::OpKernelContext*, std::function<void ()>) (this=0x4b5f8b0, context=0x7f52b0009630, done=...)
        at /home/molee/horovod/horovod/tensorflow/mpi_ops.cc:657
    657	    OP_REQUIRES_OK_ASYNC(context, ConvertStatus(common::CheckInitialized()),
    (gdb) n

5. Now you're in the c++ portion of the code.


Debugging via VSCode (WIP)
--------------------------

In ``.vscode/launch.json``, the configuration `python_to_cpp_debug` attaches itself to a running pytest (or any user program).
The idea is:
1. Trigger pytest via CLI (since there's no obvious way to run a pytest via horovodrun)

.. code-block:: bash

    $ horovodrun --gloo  --verbose -np 2 pytest -v test/parallel/test_tensorflow.py -k "test_horovod_allgather_error"

2. Set a pdb breakpoint in the test
3. Trigger ``python_to_cpp_debug`` and attach the pid(s) matching ``pytest`` in the popup input.
4. Set C++ breakpoint, and then continue on pdb.

**Warning:** Unfortunately, the approach above doesn't work fully and will ignore endpoint. So please refer to the manual approach for now.

.. code-block:: json

    {

        "version": "0.2.0",
        "configurations": [
            {
                "name": "Python: Current File",
                "type": "python",
                "request": "launch",
                "program": "${file}",
                "console": "integratedTerminal"
            },
            {
                "name": "python_to_cpp_debug",
                "type": "cppdbg",
                "request": "attach",
                "program": "${workspaceFolder}/env/bin/python",
                "processId": "${command:pickProcess}",
                "stopAtEntry": false,
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ],
                "sourceFileMap": {
                    "/proc/self/cwd/": "${workspaceFolder}"
                },
            },
        ]
    }